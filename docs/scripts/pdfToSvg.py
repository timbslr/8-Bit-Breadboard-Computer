# Generated with ChatGPT - full PDF to tightly cropped SVG converter

import os
import fitz  # PyMuPDF
from pypdf import PdfReader, PdfWriter
import tempfile

def crop_pdf_to_content(input_pdf, output_pdf, margin=0):
    """Crops PDF pages using PyPDF to remove blank margins"""
    reader = PdfReader(input_pdf)
    writer = PdfWriter()

    for page in reader.pages:
        media_box = page.mediabox

        x0 = float(media_box.left) + margin
        y0 = float(media_box.bottom) + margin
        x1 = float(media_box.right) - margin
        y1 = float(media_box.top) - margin

        page.cropbox.lower_left = (x0, y0)
        page.cropbox.upper_right = (x1, y1)

        writer.add_page(page)

    with open(output_pdf, "wb") as out_file:
        writer.write(out_file)

def pdf_page_to_cropped_svg(input_pdf, output_svg, page_number=0):
    """Exports a single page of a PDF as tightly cropped SVG"""
    doc = fitz.open(input_pdf)
    page = doc.load_page(page_number)

    rects = []

    # --- Text, images, and vector graphics ---
    blocks = page.get_text("dict")["blocks"]
    for b in blocks:
        if "lines" in b:  # text
            for line in b["lines"]:
                for span in line["spans"]:
                    rects.append(fitz.Rect(span["bbox"]))
        if b.get("type") == 1:  # image
            rects.append(fitz.Rect(b["bbox"]))
        if b.get("type") == 2:  # vector graphics (lines, curves, fills)
            rects.append(fitz.Rect(b["bbox"]))

    # --- Annotations ---
    for annot in page.annots() or []:
        rects.append(annot.rect)

    # --- Fallback to entire page if nothing detected ---
    if rects:
        tight_rect = rects[0]
        for r in rects[1:]:
            tight_rect |= r
    else:
        tight_rect = page.rect

    # --- Create a temporary cropped single-page PDF ---
    tmp_doc = fitz.open()
    tmp_page = tmp_doc.new_page(width=tight_rect.width, height=tight_rect.height)
    tmp_page.show_pdf_page(tmp_page.rect, doc, page_number, clip=tight_rect)

    # --- Export as SVG ---
    svg_data = tmp_page.get_svg_image(matrix=fitz.Matrix(1, 1))
    with open(output_svg, "w", encoding="utf-8") as f:
        f.write(svg_data)

    tmp_doc.close()
    doc.close()

def batch_convert_pdfs_all_pages(folder_path, output_folder=None, margin=11):
    """Crops PDFs and converts each page to tightly cropped SVGs"""
    if output_folder is None:
        output_folder = folder_path

    os.makedirs(output_folder, exist_ok=True)

    for filename in os.listdir(folder_path):
        if not filename.lower().endswith(".pdf"):
            continue

        input_path = os.path.join(folder_path, filename)
        name_without_ext = os.path.splitext(filename)[0]

        with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as tmp_pdf:
            tmp_pdf_path = tmp_pdf.name

        # Step 1: Crop PDF using PyPDF to remove white margins
        crop_pdf_to_content(input_path, tmp_pdf_path, margin=margin)

        # Step 2: Convert each page to tightly cropped SVG
        doc = fitz.open(tmp_pdf_path)
        for page_number in range(len(doc)):
            if len(doc) == 1:
                output_name = f"{name_without_ext}.svg"
            else:
                output_name = f"{name_without_ext}_page_{page_number+1}.svg"

            output_path = os.path.join(output_folder, output_name)
            pdf_page_to_cropped_svg(tmp_pdf_path, output_path, page_number)

        doc.close()
        os.remove(tmp_pdf_path)
        print(f"âœ… Finished {filename}")

# --- Example usage ---
if __name__ == "__main__":
    batch_convert_pdfs_all_pages(
        folder_path="../../Schematics",
        output_folder="../resources/Wiring Diagrams",
        margin=11 #11 for cropping away the defaultBorder generated by EasyEDA
    )
